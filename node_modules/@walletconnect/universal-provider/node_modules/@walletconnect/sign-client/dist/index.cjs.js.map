{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  // evm\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  // solana\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n\n  // sui\n  sui_signAndExecuteTransaction: {\n    key: \"digest\",\n  },\n  sui_signTransaction: {\n    key: \"\",\n  },\n\n  // hedera\n  hedera_signAndExecuteTransaction: {\n    key: \"transactionId\",\n  },\n  hedera_executeTransaction: {\n    key: \"transactionId\",\n  },\n\n  // near\n  near_signTransaction: {\n    key: \"\",\n  },\n  near_signTransactions: {\n    key: \"\",\n  },\n\n  // tron\n  tron_signTransaction: {\n    key: \"txID\",\n  },\n\n  // xrpl\n  xrpl_signTransaction: {\n    key: \"\",\n  },\n\n  xrpl_signTransactionFor: {\n    key: \"\",\n  },\n\n  // algorand\n  algo_signTxn: {\n    key: \"\",\n  },\n\n  // bitcoin\n  sendTransfer: {\n    key: \"txid\",\n  },\n\n  // stacks\n  stacks_stxTransfer: {\n    key: \"txId\",\n  },\n\n  // polkadot\n  polkadot_signTransaction: {\n    key: \"\",\n  },\n\n  // cosmos\n  cosmos_signDirect: {\n    key: \"\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n  extractSolanaTransactionId,\n  getSuiDigest,\n  mergeRequiredAndOptionalNamespaces,\n  getNearTransactionIdFromSignedTransaction,\n  getAlgorandTransactionId,\n  buildSignedExtrinsicHash,\n  getSignDirectHash,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(async () => {\n        await this.processPendingMessageEvents();\n\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  private async processPendingMessageEvents() {\n    try {\n      const topics = this.client.session.keys;\n      const pendingMessages = this.client.core.relayer.messages.getWithoutAck(topics);\n      for (const [topic, messages] of Object.entries(pendingMessages)) {\n        for (const message of messages) {\n          try {\n            await this.onProviderMessageEvent({\n              topic,\n              message,\n              publishedAt: Date.now(),\n            });\n          } catch (error) {\n            this.client.logger.warn(\n              `Error processing pending message event for topic: ${topic}, message: ${message}`,\n            );\n          }\n        }\n      }\n    } catch (error) {\n      this.client.logger.warn(\"processPendingMessageEvents failed\", error);\n    }\n  }\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n\n    // requiredNamespaces are deprecated, assign them to optionalNamespaces\n    connectParams.optionalNamespaces = mergeRequiredAndOptionalNamespaces(\n      connectParams.requiredNamespaces,\n      connectParams.optionalNamespaces,\n    );\n\n    connectParams.requiredNamespaces = {};\n\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      id: payloadId(),\n    };\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n      clientRpcId: proposal.id,\n    });\n\n    await this.setProposal(proposal.id, proposal);\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, scopedProperties, sessionConfig } =\n      params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        tvf = this.getTVFParams(id, request.params, result);\n      } catch (error) {\n        this.client.logger.warn(`sendResult() -> getTVFParams() failed`, error);\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      this.onProviderMessageEvent(event);\n    });\n  }\n\n  private onProviderMessageEvent = async (event: RelayerTypes.MessageEvent) => {\n    // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n    if (!this.initialized || this.relayMessageCache.length > 0) {\n      this.relayMessageCache.push(event);\n    } else {\n      await this.onRelayMessage(event);\n    }\n  };\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    try {\n      const payload = await this.client.core.crypto.decode(topic, message, {\n        receiverPublicKey: publicKey,\n        encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n      });\n\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        await this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        await this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n      await this.client.core.relayer.messages.ack(topic, message);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        scopedProperties,\n        sessionConfig,\n      } = payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(scopedProperties && { scopedProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 2176`);\n      }\n\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          ...proposal,\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n          scopedProperties: proposal.scopedProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      const warning =\n        \"requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces\";\n      // if logger level is one of the following, the logger.warn will not be shown, so we need to use console.warn\n      if ([\"fatal\", \"error\", \"silent\"].includes(this.client.logger.level)) {\n        console.warn(warning);\n      } else {\n        this.client.logger.warn(warning);\n      }\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const requestedNamespaces = Object.keys(requiredNamespaces || {}).concat(\n        Object.keys(optionalNamespaces || {}),\n      );\n\n      const scopedNamespaces = Object.keys(scopedProperties);\n      const valid = scopedNamespaces.every((ns) => requestedNamespaces.includes(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, required/optional namespaces: ${JSON.stringify(requestedNamespaces)}`,\n        );\n      }\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties, scopedProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (!isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const approvedNamespaces = new Set(Object.keys(namespaces));\n      const scopedNamespaces = Object.keys(scopedProperties);\n\n      // the approved scoped namespaces must be a subset of the approved namespaces\n      const valid = scopedNamespaces.every((ns) => approvedNamespaces.has(ns));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, approved namespaces: ${Array.from(approvedNamespaces).join(\", \")}`,\n        );\n      }\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: SessionTypes.ScopedProperties, type: string) => {\n    Object.values(properties).forEach((property, index) => {\n      if (property === null || property === undefined) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must contain an existing value for each key. Received: ${property} for key ${\n            Object.keys(properties)[index]\n          }`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    const tvf: RelayerTypes.ITVF = {\n      correlationId: id,\n      rpcMethods: [params.request.method],\n      chainId: params.chainId,\n    };\n    try {\n      const txHashes = this.extractTxHashesFromResult(params.request, result);\n      tvf.txHashes = txHashes;\n      tvf.contractAddresses = this.isValidContractData(params.request.params)\n        ? [params.request.params?.[0]?.to]\n        : [];\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return tvf;\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (\n    request: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"][\"request\"],\n    result: any,\n  ): string[] => {\n    try {\n      if (!result) return [];\n\n      const method = request.method;\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n\n      if (method === \"sui_signTransaction\") {\n        return [getSuiDigest(result.transactionBytes)];\n      }\n\n      if (method === \"near_signTransaction\") {\n        return [getNearTransactionIdFromSignedTransaction(result)];\n      }\n\n      if (method === \"near_signTransactions\") {\n        return result.map((tx: any) => getNearTransactionIdFromSignedTransaction(tx));\n      }\n\n      if (method === \"xrpl_signTransactionFor\" || method === \"xrpl_signTransaction\") {\n        return [result.tx_json?.hash];\n      }\n\n      if (method === \"polkadot_signTransaction\") {\n        return [\n          buildSignedExtrinsicHash({\n            transaction: request.params.transactionPayload,\n            signature: result.signature,\n          }),\n        ];\n      }\n\n      if (method === \"algo_signTxn\") {\n        return isValidArray(result)\n          ? result.map((tx: any) => getAlgorandTransactionId(tx))\n          : [getAlgorandTransactionId(result)];\n      }\n\n      if (method === \"cosmos_signDirect\") {\n        return [getSignDirectHash(result)];\n      }\n\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes: string[] = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        if (method === \"solana_signAllTransactions\") {\n          return hashes.map((hash) => extractSolanaTransactionId(hash));\n        }\n\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { populateAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = populateAppMetadata(opts?.metadata);\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","mergeRequiredAndOptionalNamespaces","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","scopedProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","warning","requestedNamespaces","ns","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","approvedNamespaces","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","index","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","txHashes","data","hexPart","methodConfig","TVF_METHODS","getSuiDigest","getNearTransactionIdFromSignedTransaction","tx","buildSignedExtrinsicHash","isValidArray","getAlgorandTransactionId","getSignDirectHash","hashes","extractSolanaTransactionId","topics","pendingMessages","messages","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","populateAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}